// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums :
enum UserType {
  ADMIN
  USER
  SENDER
  RECEIVER
}

enum RoomType {
  PRIVATE
  PUBLIC
  PROTACTED
}

model UserSocket {
  id         String   @id @default(uuid())
  socketId   String
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// models :
model User {
  id            String          @id @default(uuid())
  login         String          @unique
  email         String          @unique
  password      String?
  first_name    String?
  last_name     String?
  kind          String?
  image         String?
  is_active     Boolean         @default(false)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  Members       Members[]
  Messages      Messages[]
  Rooms         Rooms[]
  directMessage DirectMessage[]
  UserSocket    UserSocket[]
}

model Rooms {
  id         String     @id @default(uuid())
  name       String     @unique
  type       RoomType   @default(PUBLIC)
  members    Members[]
  messages   Messages[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  User       User[]
}

model DirectMessage {
  id         String     @id @default(uuid())
  name       String     @unique
  members    Members[]
  messages   Messages[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  User       User?      @relation(fields: [userId], references: [id])
  userId     String?
}

model Members {
  id              String         @id @default(uuid())
  user            User           @relation(fields: [userId], references: [id])
  RoomId          Rooms?         @relation(fields: [roomsId], references: [id])
  DirectMessage   DirectMessage? @relation(fields: [directmessageId], references: [id])
  type            UserType       @default(USER)
  userId          String
  roomsId         String?
  directmessageId String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
}

model Messages {
  content         String
  id              String         @id @default(uuid())
  sender          User           @relation(fields: [senderId], references: [id])
  roomId          Rooms?         @relation(fields: [roomsId], references: [id])
  senderId        String
  roomsId         String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  DirectMessage   DirectMessage? @relation(fields: [directMessageId], references: [id])
  directMessageId String?
}
